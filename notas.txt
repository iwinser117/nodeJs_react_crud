Ejecutar el contenedor.

1. Definicion de variables de entorno con la siguiente estructura:

PARA EL BACKEND:
================================================================

DB_HOST='localhost'
DB_USER=root
DB_PASS='admin123'
DB_NAME='postgres'
DB_PORT='5432'
JWT_SECRET='Esto_es_una_clave_secreta'
PORT=3000

# PgAdmin
PGADMIN_EMAIL=admin@example.com
PGADMIN_PASS=admin123

================================================================

VARIABLES PARA EL FRONTEND

================================================================

PORT=3001
NEXT_PUBLIC_API_URL=http://localhost:3000

================================================================


*************************************************
************************************************

Aplica para entorno windows la siguiente configuracion de los Dockerfile

*************************************************
************************************************


FRONTEND

================================================================

# Use una imagen de Node.js como base
FROM node:18-alpine

# Establecer el directorio de trabajo
WORKDIR /app/frontend

# Copiar el package.json y package-lock.json
COPY package*.json ./

# Instalar las dependencias
RUN npm install

# Copiar el código fuente
COPY . .

# Construir la aplicación
RUN npm run build

# Exponer el puerto 3001
EXPOSE 3001

# Establecer la variable de entorno para la URL del backend
ENV REACT_APP_API_URL=http://backend:3000

# Iniciar la aplicación
CMD ["npm", "start"]

================================================================


Aplica para el dockerfile del backend

================================================================

# Usar imagen base de Node.js 
FROM node:18-alpine 

# Instalar herramientas necesarias
RUN apk add --no-cache bash postgresql-client

# Establecer directorio de trabajo 
WORKDIR /app/backend 

# Copiar script de espera
COPY wait-for-postgres.sh /wait-for-postgres.sh
RUN chmod +x /wait-for-postgres.sh

# Copiar package.json y package-lock.json 
COPY package*.json ./ 

# Instalar dependencias
RUN npm install

# Copiar el resto del código 
COPY . . 

# Exponer el puerto que usa la aplicación 
EXPOSE 3000 

# Comando para esperar la base de datos y luego iniciar la app
CMD ["/wait-for-postgres.sh", "node", "src/server.js"]


================================================================

y la configuracion de el docker-compose.yml
en el momento quedo en la carpeta backend

================================================================

version: '3.8'
services:
  postgres:
    image: postgres:13.3-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app/backend
      # Asegúrate de no sobrescribir node_modules
      - /app/backend/node_modules
    command: npm start # Actualiza el comando de inicio si es necesario

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - REACT_APP_API_URL=http://backend:3000
    depends_on:
      - backend

volumes:
  postgres-data:

================================================================


Para ejecucion en entorno linux ,, reemplaza la siguiente configuracion en el docker-compose.yml

*******************************************
*     depends_on:                         *
*           postgres:                     *
*             condition: service_healthy  *
*                                         *
*     por:                                *
*                                         *
*     depends_on: *                       *
*          - postgres *                   *
*******************************************